
/* 

Your API Key: a61cfafb-231f-4371-a536-5a79bafaaa51






  <QueryClientProvider client={queryClient}>

  // console.log("user", user);
  // const { isLoading, error, data, isFetching } = useQuery({
  //   queryKey: ["repoData"],
  //   queryFn: () => axios.get("/user.json").then((res) => res.data),
  // });
  // if (isLoading) return "Loading...";
  // if (error) return "An error has occurred: " + error.message;

  // console.log("data3", data);


// Create a client
// const queryClient = new QueryClient();


  //                   dis_none={"none"}
  

  // //   console.log("uniCon",uniUser);              // console.log(allStatus);



  const arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];
  const arr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];

  const toggleAccordion = () => {
    setState(state === "" ? "active" : "");
  }

  const select = (e) => {};

   className={activeButton ? `activeButton` : ""}


     // const colorFix = (e) => {
  //   const filter = AllUserData.filter((item) => item.country === e);
  //   if (filter) {
  //     setColor("aqua");
  //   } else {
  //     setColor("gray");
  //   }
  // };

  background: ${props => props.bg_r ? "palevioletred" : "white"};

      <button
        name="bd"
  
        onClick={() => {
          filterCity("bd");
        }}
        id="bd">

      </button>

<Button
      name="bd"
        c_w
        act
        onClick={() => {
          filterCity("bd");
        }}
        id="bd"
      >
        Normal
      </Button>
                               {console.log('country',country)} 
                               {console.log('uniState',uniState)} 

    
      // const res = count_result(all);
      // Object.keys(res).forEach((country, index) => {
      //   const count = res[country];
      //   const data = { country, count };
      //   // console.log(data);
      //   uniCountry.push(data);
      // });


    <TableColumn
                      data={uniCountry}
                      index={index}
                      color={color}
                      filterState={filterState}
                      colorFix={colorFix}
                      />


        {clickedRow === row.id && (
                <td className="right-column" colspan={5}>
                {row.right}
                </td>
              )} 
 


      state?.map((user, index) => (    
                      <>               
                        <Table
                          data={user}
                          index={index}
                          color={color}
                          filterState={filterCity}
                          colorFix={colorFix2}
                          />   



      <FullColumn  name={"User Id"}  user={user.key_id} />
              <FullColumn  name={"Gender"}  user={user.gender} />
              <FullColumn  name={"Post Code"}  user={user.postcode} />
              <FullColumn  name={"IP"}  user={user.postcode} />
              <FullColumn  name={"Email"}  user={user.email} />
              <FullColumn  name={"Phone"}  user={user.phone} />
              <FullColumn  name={"Status"}  user={user.status} />



  useEffect(() => {
    if(location.lat && location.lng){
      fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${location.lat},${location.lng}&key=YOUR_API_KEY`)
        .then(response => response.json())
        .then(data => {
          if(data.status === "OK"){
            let result = data.results[0];
            let city, state, country, country_code, dial_code;
            result.address_components.forEach(component => {
              if (component.types.indexOf("locality") !== -1) {
                city = component.long_name;
              }
              if (component.types.indexOf("administrative_area_level_1") !== -1) {
                state = component.long_name;
              }
              if (component.types.indexOf("country") !== -1) {
                country = component.long_name;
                country_code = component.short_name;
                dial_code = component.international_phone_code
              }
            });
            setAddress({
              city: city,
              state: state,
              country: country,
              country_code: country_code,
              dial_code: dial_code,
            });
          }
        })
        .catch(error => console.log(error));
    }
  }, [location]);



  useEffect(() => {
    navigator.geolocation.getCurrentPosition(
      (position) => {
        setLocation({
          lat: position.coords.latitude,
          lng: position.coords.longitude
        });
      },
      (error) => {
        console.log(error);
      }
    );
  }, []);

.search {
  border: none;
  outline: none;
  background-color: transparent;
  border-bottom: 1.5px solid #2d68cf;
  color: #0247ba;
  font-size: 16px;
}
.search::placeholder {
  font-size: 16px;
  font-weight: 500;
}
.activeButton {
  background-color: #0247ba;
  color: #fff;
}



  // console.log(ip);

  // useEffect(() => {
  //   if (ip) {
  //   fetch(`https://api.ipfind.com?ip=${ip}&auth=a61cfafb-231f-4371-a536-5a79bafaaa51`)
  //     .then(response => response.text())
  //     .then(loc => setAddress(loc))
  //   }
  // }, [ip]);

  // console.log('location',location);
  // console.log(address);


  // console.log(city);

  // console.log('state',state);
  // console.log('user',user);



  // const allStatus =
  //   review?.length +
  //   approved?.length +
  //   banned?.length +
  //   rejected?.length +
  //   verified?.length;
  // console.log(review);

// export const UniqueUserData = () => {
//   const [uniqueUserData, setUniqueUserData] = useState();
//   useEffect(() => {
//     fetch("/user.json")
//       .then((response) => response.json())
//       .then((json) => {
//         const uniq = [
//           ...new Map(json.map((item) => [item["country"], item])).values(),
//         ];
//         setUniqueUserData(uniq);
//       });
//   },[]);
//   // console.log("uniCon",uniqueUserData);
//   return uniqueUserData;
// };


 <Filter
                  uniCountry={uniCountry}
                  uniState={state}
                  uniCity={city}
                  filterState={filterState}
                /> 

 setFirst([]);
          setFirst1([]);

          <MdOutlineCancel
              onClick={cancelLoading}
              color="red"
              size={25}
              className="cancel-button"
            />

  <button className="cancel-button" onClick={cancelLoading}>
            Cancel
          </button>

    <button className="start-button" onClick={startLoading}>
          Start
        </button>
|| item.email.toLowerCase().includes(searchTerm.toLowerCase());


  let intervalId;
  const startLoading = () => {
    setIsLoading(true);
    setProgress(0);
    intervalId = setInterval(() => {
      setProgress((prevProgress) => {
        if (prevProgress === 100) {
          clearInterval(intervalId);
          setIsLoading(false);
          setFirst([]);
          setFirst1([]);
          return 0;
        }
        return prevProgress + 10;
      });
    }, 1000);
  };

  const cancelLoading = () => {
    clearInterval(intervalId);
    setIsLoading(false);
    setProgress(true);
  };

   <div>
        {isLoading ? (
          <div className="loader-container">
            <svg viewBox="0 0 36 36">
              <path
                className="progress-bg"
                d="M 18 2.0845
                  a 15.9155 15.9155 0 0 1 0 31.831
                  a 15.9155 15.9155 0 0 1 0 -31.831"
              />
              <path
                className="progress-bar"
                strokeDasharray={`${progress}, 100`}
                d="M 18 2.0845
                  a 15.9155 15.9155 0 0 1 0 31.831
                  a 15.9155 15.9155 0 0 1 0 -31.831"
              />
            </svg>

            <MdOutlineCancel
              onClick={cancelLoading}
              color="red"
              className="cancel-button"
            />
          </div> 
        ) : (
          <button className="start-button" onClick={startLoading}>
            Start
          </button>
        )}
      </div>

   console.log(e.target.value);
    setSearchText(e.target.value);
    console.log(searchText);


const filteredData = 

    const filteredData = dataArray.filter(item => {
      return item.name.toLowerCase().includes(searchText.toLowerCase());
    });
    setSearchResults(filteredData);

          const filteredData = dataArray.filter(item => {
            return item.name.toLowerCase().includes(searchText.toLowerCase());
          });














  







*/















